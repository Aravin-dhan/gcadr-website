// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  blogPosts BlogPost[]
  events    Event[]
  galleries Gallery[]
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String
  excerpt     String?
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  authorId    String
  categoryId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author   User      @relation(fields: [authorId], references: [id])
  category Category? @relation(fields: [categoryId], references: [id])
  tags     Tag[]     @relation("BlogPostTags")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  blogPosts BlogPost[]
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  blogPosts BlogPost[] @relation("BlogPostTags")
}

model Event {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String
  content     String?
  startDate   DateTime
  endDate     DateTime?
  location    String?
  eventType   EventType
  published   Boolean   @default(false)
  featured    Boolean   @default(false)
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  author User @relation(fields: [authorId], references: [id])
}

model Gallery {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String?
  published   Boolean  @default(false)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author User    @relation(fields: [authorId], references: [id])
  images Image[]
}

model Image {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  url         String
  alt         String?
  caption     String?
  galleryId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  gallery Gallery? @relation(fields: [galleryId], references: [id])
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Submission {
  id           String         @id @default(cuid())
  type         SubmissionType
  title        String
  authorName   String
  authorEmail  String
  authorBio    String?
  content      String
  keywords     String?
  status       SubmissionStatus @default(PENDING)
  reviewNotes  String?
  submittedAt  DateTime       @default(now())
  reviewedAt   DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Internship {
  id              String            @id @default(cuid())
  applicantName   String
  applicantEmail  String
  cv              String            // File path
  interestLetter  String            // File path
  writingSample   String            // File path
  proposedDates   String
  status          InternshipStatus  @default(PENDING)
  reviewNotes     String?
  appliedAt       DateTime          @default(now())
  reviewedAt      DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String
  replied   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  EDITOR
}

enum EventType {
  CONFERENCE
  WORKSHOP
  SEMINAR
  COMPETITION
  COURSE
}

enum SubmissionType {
  BLOG_ARTICLE
  JOURNAL_ARTICLE
}

enum SubmissionStatus {
  PENDING
  UNDER_REVIEW
  ACCEPTED
  REJECTED
  PUBLISHED
}

enum InternshipStatus {
  PENDING
  UNDER_REVIEW
  ACCEPTED
  REJECTED
}
